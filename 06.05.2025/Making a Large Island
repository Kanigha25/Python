class Solution(object):

    def dfs(self, grid, i, j, visited, count, island_id):
        visited[i][j] = island_id
        count[0] += 1
        neighbours = [[-1,0], [1,0], [0,1], [0,-1]]
        for nei in neighbours:
            i_new = i+nei[0]
            j_new = j+nei[1]
            if(i_new >=0 and i_new < len(grid) and j_new >= 0 and j_new < len(grid[0]) and visited[i_new][j_new] == 0 and grid[i_new][j_new] == 1):
                self.dfs(grid, i_new, j_new, visited, count, island_id)


    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        island_count = {}
        island_id = 1
        max_single_island = 0
        visited = [[0 for b in range(len(grid[0]))] for a in range(len(grid))]

        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if(grid[i][j] and visited[i][j] == 0):
                    count = [0]
                    self.dfs(grid, i, j, visited, count, island_id)
                    island_count[island_id] = count[0]
                    island_id += 1
                    max_single_island = max(max_single_island, count[0])

        result = 0
        neighbours = [[-1,0], [1,0], [0,1], [0,-1]]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if(grid[i][j] == 0):
                    temp_res = 0
                    visited_ids = {}
                    for nei in neighbours:
                        i_new = i+nei[0]
                        j_new = j+nei[1]
                        if(i_new >=0 and i_new < len(grid) and j_new >= 0 and j_new < len(grid[0]) and visited[i_new][j_new] != 0 and visited[i_new][j_new] not in visited_ids):
                            temp_res += island_count[visited[i_new][j_new]]
                            visited_ids[visited[i_new][j_new]] = 1
                    result = max(result, temp_res+1)
                    
        return max(result,max_single_island)

                    
        
