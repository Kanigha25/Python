class Solution(object):
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        target = tuple(int(d) for d in target)
        all_deadends = set()
        for deadend in deadends:
            all_deadends.add(tuple(int(d) for d in deadend))
        init = (0, 0, 0, 0)
        que = deque()
        que.append((init, 0))
        visited = set(init)
        while que:
            combo, length = que.popleft()
            if combo == target:
                return length
            if combo not in all_deadends:
                for i in range(len(combo)):
                    for delta in [-1, 1]:
                        new_combo = list(combo)
                        new_combo[i] = (new_combo[i] + delta) % 10
                        new_combo = tuple(new_combo)
                        if new_combo not in visited and new_combo not in all_deadends:
                            visited.add(new_combo)
                            que.append((new_combo, length + 1))
        return -1
