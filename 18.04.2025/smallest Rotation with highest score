
class Solution(object):
    def bestRotation(self, nums):
        n = len(nums)
        score_deltas = [0] * n
        
        # Calculate score_deltas for each index in nums
        for i, num in enumerate(nums):
            # When nums[i] is "in place" and contributes to score
            left = (i + 1) % n  # Start of range (inclusive)
            right = (i - num + n + 1) % n  # End of range (exclusive)
            
            # Increment and decrement points in score_deltas to indicate range
            score_deltas[left] += 1
            score_deltas[right] -= 1
            if left > right:  # Wrap-around case
                score_deltas[0] += 1  # Increase score at the beginning of the array
                
        # Calculate the best rotation based on accumulated score_deltas
        max_score, best_k = 0, 0
        current_score = 0

        for k in range(n):
            current_score += score_deltas[k]
            if current_score > max_score:
                max_score = current_score
                best_k = k

        return best_k
