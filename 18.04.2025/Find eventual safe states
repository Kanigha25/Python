class Solution(object):
    def eventualSafeNodes(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: List[int]
        """
        n = len(graph)
        state = [0] * n  # 0 = unvisited, 1 = visiting, 2 = safe

        def dfs(node):
            if state[node] > 0:
                return state[node] == 2
            state[node] = 1  # Mark as visiting
            for neighbor in graph[node]:
                if state[neighbor] == 2:  # Already safe
                    continue
                if state[neighbor] == 1 or not dfs(neighbor):  
                    return False  # Cycle detected
            state[node] = 2  # Mark as safe
            return True

        return sorted([i for i in range(n) if dfs(i)])
